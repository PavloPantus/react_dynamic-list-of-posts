{"version":3,"sources":["api/getDataFromUrl.js","api/postsUrl.js","api/usersUrl.js","api/commentsUrl.js","PostList/Post/PostAuthorInfo.js","PostList/Post/CommentList/Comment/Comment.js","PostList/Post/CommentList/CommentList.js","PostList/Post/Post.js","PostList/PostList.js","App.js","index.js"],"names":["getDataFromUrl","url","defaultData","responsePromise","data","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","ok","json","abrupt","stop","postsUrl","usersUrl","commentsUrl","PostAuthorInfo","_ref","postAuthor","react_default","createElement","className","name","email","address","street","suite","city","zipcode","Comment","singleComment","body","CommentList","comments","map","comment","CommentList_Comment_Comment","key","id","Post","singlePost","searchQuery","Fragment","_ref2","text","textToHighLight","regular","RegExp","concat","split","part","title","Post_PostAuthorInfo","author","Post_CommentList_CommentList","PostList","_useState","useState","_useState2","Object","slicedToArray","preparedPosts","setPreparedPosts","_useState3","_useState4","isLoadingPosts","setIsLoadingPosts","_useState5","_useState6","isLoadedPosts","setIsLoadedPosts","_useState7","_useState8","setSearchQuery","getPreparedPostsFromServer","posts","users","Promise","all","post","objectSpread2","find","user","userId","filter","postId","debouncedHandleInputChange","func","delay","timer","clearTimeout","_len","arguments","length","args","Array","_key","setTimeout","apply","debounce","toLowerCase","type","onChange","event","target","value","placeholder","replace","includes","PostList_Post_Post","onClick","_context2","t0","t1","App","PostList_PostList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.31129e9f.chunk.js","sourcesContent":["const getDataFromUrl = async(url, defaultData) => {\n  const responsePromise = await fetch(url);\n\n  if (responsePromise.ok) {\n    const data = await responsePromise.json();\n\n    return data;\n  }\n\n  return defaultData;\n};\n\nexport default getDataFromUrl;\n","const postsUrl = 'https://jsonplaceholder.typicode.com/posts/';\n\nexport default postsUrl;\n","const usersUrl = 'https://jsonplaceholder.typicode.com/users';\n\nexport default usersUrl;\n","const commentsUrl = 'https://jsonplaceholder.typicode.com/comments';\n\nexport default commentsUrl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PostAuthorInfo = ({ postAuthor }) => (\n\n  <div className=\"post__author-info\">\n\n    <h3 className=\"author-info__name\">{postAuthor.name}</h3>\n    <p className=\"author-info__email\">{postAuthor.email}</p>\n    <p className=\"author-info__address\">\n        street:\n      {' '}\n      {postAuthor.address.street}\n      <br />\n        suite:\n      {' '}\n      {postAuthor.address.suite}\n      <br />\n        city:\n      {' '}\n      {postAuthor.address.city}\n      <br />\n        zipcode:\n      {' '}\n      {postAuthor.address.zipcode}\n    </p>\n\n  </div>\n\n);\n\nPostAuthorInfo.propTypes = {\n  postAuthor: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }).isRequired,\n\n};\n\nexport default PostAuthorInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ singleComment }) => (\n  <li className=\"comment\">\n    <div className=\"comment__author-info\">\n      {singleComment.name}\n      <br />\n      {singleComment.email}\n    </div>\n    <div className=\"comment__body\">\n      {singleComment.body}\n    </div>\n  </li>\n);\n\nComment.propTypes = {\n  singleComment: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment/Comment';\n\nconst CommentList = ({ comments }) => (\n  <ul className=\"post__comments\">\n    {comments.map(\n      comment => <Comment key={comment.id} singleComment={comment} />\n    )}\n  </ul>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PostAuthorInfo from './PostAuthorInfo';\nimport CommentList from './CommentList/CommentList';\n\nconst Post = ({ singlePost, searchQuery }) => {\n\n  const GetHighlightedText = ({text, textToHighLight}) => {\n    let regular = new RegExp(`(${textToHighLight})`, 'gi')\n    return text.split(regular).map(\n      part=>part === textToHighLight? <span className=\"highlighted\">{part}</span>:part\n    )\n  }\n\n  return (\n    <>\n      <article className=\"post\">\n        <h1><GetHighlightedText text={singlePost.title} textToHighLight={searchQuery} /></h1>\n        <h1 className=\"post__title\">{singlePost.title}</h1>\n        <h2 className=\"post__body\">{singlePost.body}</h2>\n        <PostAuthorInfo postAuthor={singlePost.author} />\n        <CommentList comments={singlePost.comments} />\n      </article>\n    </>\n  );\n}\n\nPost.propTypes = {\n  singlePost: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    author: PropTypes.object,\n    comments: PropTypes.array,\n  }).isRequired,\n};\n\nexport default Post;\n","import React, { useState } from 'react';\nimport getDataFromUrl from '../api/getDataFromUrl';\nimport postsUrl from '../api/postsUrl';\nimport usersUrl from '../api/usersUrl';\nimport commentsUrl from '../api/commentsUrl';\nimport Post from './Post/Post';\n\nfunction PostList() {\n  const [preparedPosts, setPreparedPosts] = useState([]);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isLoadedPosts, setIsLoadedPosts] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const getPreparedPostsFromServer = async() => {\n    const [posts, users, comments] = await Promise.all(\n      [getDataFromUrl(postsUrl, []),\n        getDataFromUrl(usersUrl, []),\n        getDataFromUrl(commentsUrl, [])]\n    );\n\n    return posts.map(\n      post => ({\n        ...post,\n        author: users.find(\n          user => user.id === post.userId\n        ),\n        comments: comments.filter(\n          comment => comment.postId === post.id\n        ),\n      })\n    );\n  };\n\n  const handleInputChange = (text) => {\n    setSearchQuery(text.toLowerCase());\n  };\n\n  const debounce = (func, delay) => {\n    let timer;\n\n    return (...args) => {\n      clearTimeout(timer);\n      timer = setTimeout(func, delay, ...args);\n    };\n  };\n\n  const debouncedHandleInputChange = debounce(handleInputChange, 1000);\n\n  return (\n    isLoadedPosts\n      ? (\n        <section className=\"posts\">\n          <input\n            type=\"text\"\n            name=\"searchInPosts\"\n            className=\"input input_search-in-posts\"\n            onChange={(event) => debouncedHandleInputChange(event.target.value)}\n            placeholder=\"type for searching\"\n          />\n\n          <ul className=\"posts-list\">\n\n            {preparedPosts\n              .filter(\n                post => (\n                  (post.title + post.body).replace(/[\\n\\r]/g, ' ')\n                    .toLowerCase().includes(searchQuery)\n                )\n              )\n              .map(\n                post => (\n                  <li key={post.id} className=\"post-list__item\">\n                    <Post searchQuery={searchQuery} singlePost={post} />\n                  </li>\n                )\n              )\n            }\n          </ul>\n        </section>\n      )\n      : (\n        <button\n          type=\"button\"\n          onClick={\n            async() => {\n              setIsLoadingPosts(true);\n              setPreparedPosts(await getPreparedPostsFromServer());\n              setIsLoadedPosts(true);\n            }\n          }\n        >\n          {isLoadingPosts ? 'Loading' : 'Load the List of Posts'}\n        </button>\n      )\n\n  );\n}\n\nexport default PostList;\n","import React from 'react';\nimport PostList from './PostList/PostList';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <h1 className=\"app-heading\">Dynamic list of posts</h1>\n      <PostList />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}