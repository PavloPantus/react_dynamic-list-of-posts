{"version":3,"sources":["api/getDataFromUrl.js","api/postsUrl.js","api/usersUrl.js","api/commentsUrl.js","PostList/Post/PostAuthorInfo.js","PostList/Post/CommentList/Comment/Comment.js","PostList/Post/CommentList/CommentList.js","PostList/Post/Post.js","PostList/PostList.js","App.js","index.js"],"names":["getDataFromUrl","url","responsePromise","data","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","json","abrupt","stop","postsUrl","usersUrl","commentsUrl","PostAuthorInfo","_ref","postAuthor","react_default","createElement","className","name","email","address","street","suite","city","zipcode","Comment","singleComment","body","CommentList","comments","map","comment","CommentList_Comment_Comment","key","id","Post","singlePost","Fragment","title","Post_PostAuthorInfo","author","Post_CommentList_CommentList","PostList","_useState","useState","_useState2","Object","slicedToArray","preparedPosts","setPreparedPosts","_useState3","_useState4","isLoadingPosts","setIsLoadingPosts","_useState5","_useState6","isLoadedPosts","setIsLoadedPosts","_useState7","_useState8","searchQuery","setSearchQuery","getPreparedPostsFromServer","_ref2","posts","users","Promise","all","post","objectSpread2","find","user","userId","filter","postId","debouncedHandleInputChange","func","time","timer","event","clearTimeout","setTimeout","target","value","debouncer","text","trim","toLowerCase","type","onChange","placeholder","replace","includes","PostList_Post_Post","onClick","_context2","t0","t1","App","PostList_PostList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bd4c6849.chunk.js","sourcesContent":["const getDataFromUrl = async(url) => {\n  const responsePromise = await fetch(url);\n  const data = await responsePromise.json();\n\n  return data;\n};\n\nexport default getDataFromUrl;\n","const postsUrl = 'https://jsonplaceholder.typicode.com/posts';\n\nexport default postsUrl;\n","const usersUrl = 'https://jsonplaceholder.typicode.com/users';\n\nexport default usersUrl;\n","const commentsUrl = 'https://jsonplaceholder.typicode.com/comments';\n\nexport default commentsUrl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PostAuthorInfo = ({ postAuthor }) => (\n\n  <div className=\"post__author-info\">\n\n    <h3 className=\"author-info__name\">{postAuthor.name}</h3>\n    <p className=\"author-info__email\">{postAuthor.email}</p>\n    <p className=\"author-info__address\">\n        street:\n      {' '}\n      {postAuthor.address.street}\n      <br />\n        suite:\n      {' '}\n      {postAuthor.address.suite}\n      <br />\n        city:\n      {' '}\n      {postAuthor.address.city}\n      <br />\n        zipcode:\n      {' '}\n      {postAuthor.address.zipcode}\n    </p>\n\n  </div>\n\n);\n\nPostAuthorInfo.propTypes = {\n  postAuthor: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }).isRequired,\n\n};\n\nexport default PostAuthorInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ singleComment }) => (\n  <li className=\"comment\">\n    <div className=\"comment__author-info\">\n      {singleComment.name}\n      <br />\n      {singleComment.email}\n    </div>\n    <div className=\"comment__body\">\n      {singleComment.body}\n    </div>\n  </li>\n);\n\nComment.propTypes = {\n  singleComment: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment/Comment';\n\nconst CommentList = ({ comments }) => (\n  <ul className=\"post__comments\">\n    {comments.map(\n      comment => <Comment key={comment.id} singleComment={comment} />\n    )}\n  </ul>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PostAuthorInfo from './PostAuthorInfo';\nimport CommentList from './CommentList/CommentList';\n\nconst Post = ({ singlePost }) => (\n  <>\n    <article className=\"post\">\n      <h1 className=\"post__title\">{singlePost.title}</h1>\n      <h2 className=\"post__body\">{singlePost.body}</h2>\n      <PostAuthorInfo postAuthor={singlePost.author} />\n      <CommentList comments={singlePost.comments} />\n    </article>\n  </>\n);\n\nPost.propTypes = {\n  singlePost: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    author: PropTypes.object,\n    comments: PropTypes.array,\n  }).isRequired,\n};\n\nexport default Post;\n","import React, { useState } from 'react';\nimport getDataFromUrl from '../api/getDataFromUrl';\nimport postsUrl from '../api/postsUrl';\nimport usersUrl from '../api/usersUrl';\nimport commentsUrl from '../api/commentsUrl';\nimport Post from './Post/Post';\n\nfunction PostList() {\n  const [preparedPosts, setPreparedPosts] = useState([]);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isLoadedPosts, setIsLoadedPosts] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const getPreparedPostsFromServer = async() => {\n    const [posts, users, comments] = await Promise.all(\n      [getDataFromUrl(postsUrl),\n        getDataFromUrl(usersUrl),\n        getDataFromUrl(commentsUrl)]\n    );\n\n    return posts.map(\n      post => ({\n        ...post,\n        author: users.find(\n          user => user.id === post.userId\n        ),\n        comments: comments.filter(\n          comment => comment.postId === post.id\n        ),\n      })\n    );\n  };\n\n  const handleInputChange = (text) => {\n    setSearchQuery(text.trim().toLowerCase());\n  };\n\n  const debouncer = (func, time) => {\n    let timer;\n\n    return (event) => {\n      clearTimeout(timer);\n      timer = setTimeout(func, time, event.target.value);\n    };\n  };\n\n  const debouncedHandleInputChange = debouncer(handleInputChange, 1000);\n\n  return (\n    isLoadedPosts\n      ? (\n        <section className=\"posts\">\n          <input\n            type=\"text\"\n            name=\"searchInPosts\"\n            className=\"input input_search-in-posts\"\n            onChange={debouncedHandleInputChange}\n            placeholder=\"type for searching\"\n          />\n\n          <ul className=\"posts-list\">\n\n            {preparedPosts\n              .filter(\n                post => (\n                  (post.title + post.body).replace(/[\\n\\r]/g, ' ')\n                    .toLowerCase().includes(searchQuery)\n                )\n              )\n              .map(\n                post => (\n                  <li key={post.id} className=\"post-list__item\">\n                    <Post searchQuery={searchQuery} singlePost={post} />\n                  </li>\n                )\n              )\n            }\n          </ul>\n        </section>\n      )\n      : (\n        <button\n          type=\"button\"\n          onClick={\n            async() => {\n              setIsLoadingPosts(true);\n              setPreparedPosts(await getPreparedPostsFromServer());\n              setIsLoadedPosts(true);\n            }\n          }\n        >\n          {isLoadingPosts ? 'Loading' : 'Load the List of Posts'}\n        </button>\n      )\n\n  );\n}\n\nexport default PostList;\n","import React from 'react';\nimport PostList from './PostList/PostList';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <h1 className=\"app-heading\">Dynamic list of posts</h1>\n      <PostList />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}